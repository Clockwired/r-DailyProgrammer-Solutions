def permutation(n, r):
	return  int(factorial(n)  / factorial(n-r))

def factorial(x):
	product = 1
	for i in range(1, x + 1):
		product *= i
	return product

def combinations(n, r):
	return int(factorial(n) / (factorial(r) * factorial(n-r)))

def pascal_triangle_row(n):
	#return [combinations(n, r) for r in range(n + 1)] | Another Advanced Trick: List Comprehension
	pRow = []
	for r in range(n + 1):
		pRow.append(combinations(n, r))
	return pRow

def percentchange(a, b):
	if a > b :
		print("This is a percent Increase")
	else:
		if a < b:
			print("This is a percent decrease")
		else:
			print("This is the same number!!!")	
	return (a-b) / a * 100



def primes(z):
	for n in range(2, b+1):
		for x in range(2,n):
			if n % x ==0:
				print(n, 'Equals', x, '*', n//x)
				break
		else:
			print(n, "Is a prime number")
